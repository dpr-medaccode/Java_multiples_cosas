/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pruebapractica10;

import java.awt.Color;
import java.awt.Component;
import java.sql.*;
import java.time.*;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author DAW05
 */
public class GestorPadel extends javax.swing.JFrame {

    private final String[] HORAS = {
        "09:00", "10:00", "11:00", "12:00", "13:00",
        "14:00", "15:00", "16:00", "17:00", "18:00",
        "19:00", "20:00"
    };

    private DefaultTableModel modeloTabla;
    private LocalDate fechaActual = LocalDate.now();
    private Connection conexion;
    /**
     * Creates new form GestorPadel
     */
    public GestorPadel() {
        initComponents();                        
        this.setLocationRelativeTo(null);        

        conexion = ConexionBD.conectar();             
        cargarTablaReservas(fechaActual);        
        agregarClickTabla();   
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setForeground(new java.awt.Color(204, 204, 255));

        jLabel1.setText("Nombre");

        jLabel2.setText("Pista");

        jLabel3.setText("Fecha (YYYY-MM-DD)");

        jLabel4.setText("Duraci√≥n (min)");

        jButton2.setText("Guardar reserva");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:00  ", "10:00  ", "11:00  ", "12:00  ", "13:00  ", "14:00  ", "15:00  ", "16:00  ", "17:00  ", "18:00  ", "19:00  ", "20:00", " " }));

        jLabel5.setText("Hora");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", " " }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "60", "90", "120", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton3.setText("Mostrar reserva");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(251, 251, 251))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         try {
        String fechaTexto = jTextField2.getText().trim();

        if (fechaTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Escribe una fecha en el campo de fecha.");
            return;
        }

        fechaActual = LocalDate.parse(fechaTexto); // actualizar la fecha actual
        cargarTablaReservas(fechaActual);          // mostrar reservas de ese d√≠a

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Fecha no v√°lida. Usa el formato YYYY-MM-DD.");
    }
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        try {
        // 1. Obtener los valores del formulario
        String nombre = jTextField1.getText().trim();
        String fechaTexto = jTextField2.getText().trim();
        String hora = jComboBox1.getSelectedItem().toString().trim();
        int pista = Integer.parseInt(jComboBox2.getSelectedItem().toString().trim());
        int duracion = Integer.parseInt(jComboBox3.getSelectedItem().toString().trim());

        // 2. Validar campos vac√≠os
        if (nombre.isEmpty() || fechaTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor completa todos los campos.");
            return;
        }

        // 3. Convertir la fecha a LocalDate
        LocalDate fecha = LocalDate.parse(fechaTexto);

        // 4. Guardar la reserva
        guardarReserva(nombre, fecha, hora, pista, duracion);

        // 5. Actualizar la tabla
        cargarTablaReservas(fechaActual);

        // 6. Limpiar campos
        jTextField1.setText("");
        jTextField2.setText("");

        JOptionPane.showMessageDialog(this, "Reserva guardada correctamente.");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al guardar reserva: " + e.getMessage());
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestorPadel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestorPadel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestorPadel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestorPadel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestorPadel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables


// ‚úÖ M√©todo: cargar la tabla con las reservas
private void cargarTablaReservas(LocalDate fecha) {
    modeloTabla = new DefaultTableModel();
    modeloTabla.addColumn("Hora");
    for (int i = 1; i <= 6; i++) {
        modeloTabla.addColumn("Pista " + i);
    }

    for (String hora : HORAS) {
        Object[] fila = new Object[7];
        fila[0] = hora;
        for (int i = 1; i <= 6; i++) {
            fila[i] = "";
        }
        modeloTabla.addRow(fila);
    }

    try {
        
        String sql = "SELECT nombre, hora_inicio, pista, duracion FROM reservas WHERE fecha = ?";
        PreparedStatement ps = conexion.prepareStatement(sql);
        ps.setDate(1, java.sql.Date.valueOf(fecha));
        ResultSet rs = ps.executeQuery();

        while (rs.next()) {
            
            String nombre = rs.getString("nombre");
            LocalTime horaInicio = rs.getTime("hora_inicio").toLocalTime();
            int pista = rs.getInt("pista");
            int duracion = rs.getInt("duracion");

            int filasOcupadas = duracion / 60;
            for (int i = 0; i < HORAS.length; i++) {
                if (HORAS[i].equals(horaInicio.toString().substring(0, 5))) {
                    for (int j = 0; j < filasOcupadas && (i + j) < HORAS.length; j++) {
                        modeloTabla.setValueAt(nombre, i + j, pista);
                    }
                    break;
                }
            }
        }

        jTable2.setModel(modeloTabla);

        ColorCelda render = new ColorCelda();
for (int i = 0; i < jTable2.getColumnCount(); i++) {
    jTable2.getColumnModel().getColumn(i).setCellRenderer(render);
}
    } catch (Exception e) {
        e.printStackTrace();
    }
    
    
}

// ‚úÖ M√©todo: activar clic sobre la tabla
private void agregarClickTabla() {
    jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent e) {
            int fila = jTable2.rowAtPoint(e.getPoint());
            int columna = jTable2.columnAtPoint(e.getPoint());

            if (columna == 0) return;

            String valor = (String) modeloTabla.getValueAt(fila, columna);
            String horaTexto = (String) modeloTabla.getValueAt(fila, 0);
            int pista = columna;

            if (valor.isEmpty()) {
                String nombre = JOptionPane.showInputDialog("Nombre:");
                String[] opciones = {"60", "90", "120"};
                String duracionStr = (String) JOptionPane.showInputDialog(null, "Duraci√≥n (min):",
                        "Duraci√≥n", JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);

                if (nombre != null && duracionStr != null) {
                    int duracion = Integer.parseInt(duracionStr);
                    guardarReserva(nombre, fechaActual, horaTexto, pista, duracion);
                    cargarTablaReservas(fechaActual);
                }

            } else {
                int confirm = JOptionPane.showConfirmDialog(null,
                        "¬øEliminar la reserva de " + valor + "?", "Confirmar",
                        JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    eliminarReserva(valor, fechaActual, horaTexto, pista);
                    cargarTablaReservas(fechaActual);
                }
            }
        }
    });
}

// ‚úÖ M√©todo: guardar una nueva reserva
private void guardarReserva(String nombre, LocalDate fecha, String horaTexto, int pista, int duracion) {
    try {
        String sql = "INSERT INTO reservas (nombre, fecha, hora_inicio, pista, duracion) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement ps = conexion.prepareStatement(sql);
        ps.setString(1, nombre);
        ps.setDate(2, java.sql.Date.valueOf(fecha));
        ps.setTime(3, java.sql.Time.valueOf(horaTexto + ":00"));
        ps.setInt(4, pista);
        ps.setInt(5, duracion);
        ps.executeUpdate();
    } catch (Exception e) {
        e.printStackTrace();
    }
}

// ‚úÖ M√©todo: eliminar reserva al hacer clic en celda ocupada
private void eliminarReserva(String nombre, LocalDate fecha, String horaTexto, int pista) {
    try {
        String sql = "DELETE FROM reservas WHERE nombre = ? AND fecha = ? AND hora_inicio = ? AND pista = ?";
        PreparedStatement ps = conexion.prepareStatement(sql);
        ps.setString(1, nombre);
        ps.setDate(2, java.sql.Date.valueOf(fecha));
        ps.setTime(3, java.sql.Time.valueOf(horaTexto + ":00"));
        ps.setInt(4, pista);
        ps.executeUpdate();
    } catch (Exception e) {
        e.printStackTrace();
    }
}

// ‚úÖ Renderizador personalizado para cambiar el color de las celdas
private class ColorCelda extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {

        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        if (column == 0) {
            c.setBackground(Color.LIGHT_GRAY); // La columna de las horas siempre gris
            return c;
        }

        if (value == null || value.toString().isEmpty()) {
            c.setBackground(new Color(200, 255, 200)); // üü© Verde claro si la celda est√° vac√≠a (libre)
        } else {
            c.setBackground(new Color(255, 180, 180)); // üü• Rojo claro si hay un nombre (ocupada)
        }

        return c;
    }
}

    
}
